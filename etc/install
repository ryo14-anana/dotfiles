#!/bin/bash

if [ "$#" -gt 1 ]; then
  echo "Usage: ./install"
  exit 1
fi

is_exists() {
  which "$1" > /dev/null 2>&1
  return $?
}

ink() {
    if [ "$#" -eq 0 -o "$#" -gt 2 ]; then
        echo "Usage: ink <color> <text>"
        echo "Colors:"
        echo "  black, white, red, green, yellow, blue, purple, cyan, gray"
        return 1
    fi

    local open="\033["
    local close="${open}0m"
    local black="0;30m"
    local red="1;31m"
    local green="1;32m"
    local yellow="1;33m"
    local blue="1;34m"
    local purple="1;35m"
    local cyan="1;36m"
    local gray="0;37m"
    local white="$close"

    local text="$1"
    local color="$close"

    if [ "$#" -eq 2 ]; then
        text="$2"
        case "$1" in
            black | red | green | yellow | blue | purple | cyan | gray | white)
            eval color="\$$1"
            ;;
        esac
    fi

    printf "${open}${color}${text}${close}"
}

logging() {
    if [ "$#" -eq 0 -o "$#" -gt 2 ]; then
        echo "Usage: ink <fmt> <msg>"
        echo "Formatting Options:"
        echo "  TITLE, ERROR, WARN, INFO, SUCCESS"
        return 1
    fi

    local color=
    local text="$2"

    case "$1" in
        TITLE)
            color=yellow
            ;;
        ERROR | WARN)
            color=red
            ;;
        INFO)
            color=blue
            ;;
        SUCCESS)
            color=green
            ;;
        *)
            text="$1"
    esac

    timestamp() {
        ink gray "["
        ink purple "$(date +%H:%M:%S)"
        ink gray "] "
    }

    timestamp; ink "$color" "$text"; echo
}

log_err() {
  logging ERROR "$1" 1>&2
}

log_info() {
  logging INFO "$1" 1>&2
}

log_suc() {
  logging SUCCESS "$1" 1>&2
}

# work dir
log_info "Check to exist work directory"
if [ ! -d "$HOME/work" ]; then
  log_info "Not exist."
  log_info "Create work directory."

  mkdir -p "$HOME/work/src"
  if [ $? -eq 0 ]; then
    log_suc "Success."
  else
    log_err "Failed to create work dir. Exit script."
    exit 1
  fi
else
  log_info "Exist."
fi

# my setup fedora
log_info "Check to exist ansible playbooks for my setup fedora."
if [ ! -d "$HOME/work/my-setup-fedora" ]; then
  log_info "Not exist."
  log_info "Clone playbooks"

  git clone https://github.com/ryoo14/my-setup-fedora "$HOME/work/my-setup-fedora"
  if [ $? -eq 0 ]; then
    log_suc "Success."
  else
    log_err "Failed to clone. Exit script."
    exit 1
  fi
else
  log_info "Exist."
fi

# install ansible
log_info "Check to ansible"
is_exists ansible-playbook
if [ $? -ne 0 ]; then
  log_info "Not exist."
  log_info "Install ansible"

  sudo dnf install -y ansible

  if [ $? -eq 0 ]; then
    log_suc "Success."
  else
    log_err "Failed to install. Exit script."
    exit 1
  fi
else
  log_info "Exist."
fi

log_info "Run Ansible Playbook"
sh $HOME/work/my-setup-fedora/run install
if [ $? -ne 0 ]; then
  log_suc "Success."
else
  log_err "Failed to install. Exit script."
  exit 1
fi

# copy dotfiles
DOTFILE_DIR=$HOME/dotfiles
CONFIG_DIR=$HOME/.config

ln -sf $DOTFILE_DIR/.Xresources           $HOME/.Xresources
ln -sf $DOTFILE_DIR/.bashrc               $HOME/.bashrc
ln -sf $DOTFILE_DIR/.bash_profile         $HOME/.bash_profile
ln -sf $DOTFILE_DIR/.fzf.bash             $HOME/.fzf.bash
ln -sf $DOTFILE_DIR/.gitconfig            $HOME/.gitconfig
ln -sf $DOTFILE_DIR/.tmux.conf            $HOME/.tmux.conf
ln -sf $DOTFILE_DIR/.vim                  $HOME/.vim
ln -sf $DOTFILE_DIR/.vimrc                $HOME/.vimrc
ln -sf $DOTFILE_DIR/config/gtk/.gtkrc-2.0 $HOME/.gtkrc-2.0

ln -sf $DOTFILE_DIR/config/i3               $CONFIG_DIR/i3
ln -sf $DOTFILE_DIR/config/nitrogen         $CONFIG_DIR/nitrogen
ln -sf $DOTFILE_DIR/config/polybar          $CONFIG_DIR/polybar
ln -sf $DOTFILE_DIR/config/ranger           $CONFIG_DIR/ranger
ln -sf $DOTFILE_DIR/config/rofi             $CONFIG_DIR/rofi
#ln -sf $DOTFILE_DIR/config/gtk/settings.ini $CONFIG_DIR/gtk-3.0/settings.ini
ln -sf $DOTFILE_DIR/config/betterlockscreen/betterlockscreenrc $CONFIG_DIR/betterlockscreenrc

ln -s $DOTFILE_DIR/bin $HOME/.local/bin

log_info "Done."
